### Wonder API Testing Collection
### This file contains HTTP requests for testing the Wonder API
### You can execute these requests directly in VS Code with the REST Client extension
### or in JetBrains IDEs with the HTTP Client

### Variables
@baseUrl = http://localhost:8080
@apiVersion = v1

###############################################################################
### Health Checks
###############################################################################

### Health Check
GET {{baseUrl}}/health
Accept: application/json

###############################################################################
### User Management
###############################################################################

### User Registration - Valid Request
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "name": "John Doe"
}

### User Registration - Another Valid User
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "jane.smith@example.com",
  "name": "Jane Smith"
}

### User Registration - Minimum Valid Name (2 chars)
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "ab@example.com",
  "name": "AB"
}

### User Registration - Maximum Valid Name (50 chars)
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "long.name@example.com",
  "name": "This is a very long name that is exactly fifty char"
}

###############################################################################
### Error Cases - Validation Errors
###############################################################################

### User Registration - Missing Email
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "name": "Missing Email User"
}

### User Registration - Missing Name
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "missing.name@example.com"
}

### User Registration - Invalid Email Format
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "invalid-email-format",
  "name": "Invalid Email User"
}

### User Registration - Empty Email
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "",
  "name": "Empty Email User"
}

### User Registration - Empty Name
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "empty.name@example.com",
  "name": ""
}

### User Registration - Name Too Short (1 char)
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "short.name@example.com",
  "name": "A"
}

### User Registration - Name Too Long (51 chars)
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "too.long@example.com",
  "name": "This name is way too long and exceeds fifty chars"
}

### User Registration - Invalid JSON
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "invalid.json@example.com"
  "name": "Missing Comma"
}

###############################################################################
### Business Logic Error Cases
###############################################################################

### User Registration - Duplicate Email (run this after a successful registration)
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "name": "Duplicate Email User"
}

###############################################################################
### Content Type Tests
###############################################################################

### User Registration - Missing Content-Type
POST {{baseUrl}}/api/{{apiVersion}}/users/register

{
  "email": "no.content.type@example.com",
  "name": "No Content Type"
}

### User Registration - Wrong Content-Type
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: text/plain

{
  "email": "wrong.content.type@example.com",
  "name": "Wrong Content Type"
}

###############################################################################
### Stress Testing
###############################################################################

### User Registration - Unicode Characters
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "unicode@example.com",
  "name": "æµ‹è¯•ç”¨æˆ· ðŸš€"
}

### User Registration - Special Characters in Name
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "special.chars@example.com",
  "name": "John O'Connor-Smith Jr."
}

###############################################################################
### Performance Testing (for load testing)
###############################################################################

### Batch User Registration - User 1
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "batch1@example.com",
  "name": "Batch User 1"
}

### Batch User Registration - User 2
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "batch2@example.com",
  "name": "Batch User 2"
}

### Batch User Registration - User 3
POST {{baseUrl}}/api/{{apiVersion}}/users/register
Content-Type: application/json

{
  "email": "batch3@example.com",
  "name": "Batch User 3"
}