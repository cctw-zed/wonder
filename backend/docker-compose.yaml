services:
  postgres:
    image: postgres:16-alpine
    container_name: wonder-postgres
    environment:
      POSTGRES_DB: wonder_dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - wonder-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wonder"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - wonder-network

  wonder:
    build:
      context: .
    container_name: wonder-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      WONDER_APP_ENVIRONMENT: development
      WONDER_APP_DEBUG: "false"
      WONDER_SERVER_HOST: 0.0.0.0
      WONDER_SERVER_PORT: 8080
      WONDER_SERVER_ENABLE_CORS: "true"
      WONDER_DATABASE_HOST: postgres
      WONDER_DATABASE_PORT: 5432
      WONDER_DATABASE_USERNAME: dev
      WONDER_DATABASE_PASSWORD: dev
      WONDER_DATABASE_DATABASE: wonder_dev
      WONDER_DATABASE_SSL_MODE: disable
      WONDER_DATABASE_LOG_LEVEL: warn
      WONDER_LOG_OUTPUT: stdout
      WONDER_LOG_ENABLE_FILE: "false"
      WONDER_LOG_LEVEL: info
      WONDER_JWT_SIGNING_KEY: super-secret-demo-key
      WONDER_JWT_EXPIRY: 24h
    ports:
      - "8080:8080"
    networks:
      - wonder-network
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:12201"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: wonder-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - wonder-network
    depends_on:
      wonder:
        condition: service_started

  grafana:
    image: grafana/grafana:11.2.0
    container_name: wonder-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/wonder-service-overview.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - wonder-network
    depends_on:
      prometheus:
        condition: service_started

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: wonder-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - wonder-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.1
    container_name: wonder-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "12201:12201/udp"
    networks:
      - wonder-network
    depends_on:
      elasticsearch:
        condition: service_started

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    container_name: wonder-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - wonder-network
    depends_on:
      elasticsearch:
        condition: service_started

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: wonder-cadvisor
    ports:
      - "8081:8080"
    networks:
      - wonder-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

networks:
  wonder-network:
    driver: bridge

volumes:
  wonder-postgres-data:
  grafana-data:
  elasticsearch-data:
